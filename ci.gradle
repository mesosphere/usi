import groovy.io.FileType
import mesosphere.gradle.aws.S3Upload
import mesosphere.gradle.github.GithubStatus
import mesosphere.gradle.travis.TravisEnvironment

import java.util.regex.Matcher
import java.util.regex.Pattern

task testReport(type: TestReport) {
    description = "Aggregate all test results from subprojects into one test report."
    group = "CI"

    destinationDir = file("${rootProject.buildDir}/reports/tests")
    // Include the results from the `test` task in all subprojects
    reportOn subprojects*.test
}

task uploadTestReports(type: S3Upload) {
    description = "Upload Gradle test reports to S3."
    group = "CI"
    dependsOn testReport

    String repoSlug = TravisEnvironment.repoSlug()
    String branch = TravisEnvironment.branch()
    String buildNumber = TravisEnvironment.buildNumber()

    region = "us-west-2"
    bucket = "usi-builds"
    prefix = "$repoSlug/$branch/$buildNumber"
    source = fileTree(rootProject.buildDir) {
        include 'reports/tests/**' // All test HTML reports aggregated by testReport.
        include 'tests/**'         // All test JUnit XML files saved to ./build/tests. See allprojects.test { ... }.
    }
}

task githubReport(type: GithubStatus) {
    description = "Report test results to Github as commit status."
    group = "CI"
    dependsOn uploadTestReports

    repoSlug = TravisEnvironment.repoSlug()
    commit = TravisEnvironment.commit()
    context = "mesosphere/tests"
    statusDescription = "Test results"
    targetUrl = "https://s3-us-west-2.amazonaws.com/${uploadTestReports.bucket}/${uploadTestReports.prefix}/reports/tests/index.html"
}

gitPublish {
    repoUri = 'https://github.com/mesosphere/usi.git'
    branch = 'gh-pages'

    contents {
        from "docs"
    }

    preserve {
        // Preserve all files from /docs on master.
        include '_config.yml'
        include '**/*.md'
    }
}
gitPublishCopy.dependsOn(scaladoc)

task provision(type: Exec) {
    commandLine './ci/provision.sh', mesosVersion
}

task ci {
    description = "The main target for CI builds."
    group = "CI"

    if (TravisEnvironment.isMasterBuild()) {
        dependsOn githubReport, gitPublishPush
    } else if (TravisEnvironment.isSecureBuild())  {
        dependsOn githubReport
    }

    doLast {
        // fail build when test failed
        File reportsDir = file("${rootProject.buildDir}/reports/tests")
        if (!reportsDir.exists()) {
            println("does not exist")
        } else {
            reportsDir.eachFile(FileType.FILES) {
                String content = it.text
                println("text results:" + it.text)
                def myMatcher = content =~ /(?s)<div class="infoBox" id="failures">\s*<div class="counter">0<\/div>/
                if (!myMatcher.matches()) {
                    throw new GradleException("There were failing tests in ${it}. See the report at: ${it.toURI()}")
                }
            }
        }
    }
}
